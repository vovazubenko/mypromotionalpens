@** Copyright 2016 Seven Spikes Ltd. All rights reserved. (http://www.nop-templates.com)
    * http://www.nop-templates.com/t/licensinginfo
*@

@using SevenSpikes.Nop.Plugins.AjaxFilters.Common
@using SevenSpikes.Nop.Plugins.AjaxFilters.Domain
@using SevenSpikes.Nop.Plugins.AjaxFilters.Models.ManufacturerFilter

@model ManufacturerFilterModel7Spikes

@{
    Html.AddScriptParts("~/Plugins/SevenSpikes.Nop.Plugins.AjaxFilters/Scripts/ManufacturerFilter.min.js");

    string filtersPanelClass = Model.NopAjaxFiltersSettings.FiltersUIMode == FiltersUIMode.UseCheckboxes ? "filtersCheckboxPanel" : "filtersDropDownPanel";

    string toggleStateClass = "toggleControl";
    string toggleStateStyles = string.Empty;

    if (Model.NopAjaxFiltersSettings.CloseManufacturersFilterBox)
    {
        toggleStateClass = "toggleControl closed";
        toggleStateStyles = "display: none;";
    }
}

@functions {
    string GetOptionAttributes(FilterItemState state)
    {
        string optionAttributes = string.Empty;

        if (state == FilterItemState.Checked || state == FilterItemState.CheckedDisabled)
        {
            if (Model.NopAjaxFiltersSettings.FiltersUIMode == FiltersUIMode.UseCheckboxes)
            {
                optionAttributes += "checked=\"checked\"";
            }
            else
            {
                optionAttributes += "selected=\"selected\"";
            }
        }

        if (state == FilterItemState.Disabled || state == FilterItemState.CheckedDisabled)
        {
            optionAttributes += " disabled=\"disabled\"";
        }

        return optionAttributes;
    }
}

@helper GetListOfOptions(IList<ManufacturerFilterItem> manufacturerFilterItems, FiltersUIMode uiMode)
{
    foreach (var filterItem in manufacturerFilterItems)
    {
        string optionAttributes = GetOptionAttributes(filterItem.FilterItemState);
        string inputId = string.Format("manufacturer-input-{0}", filterItem.Id);

        if (uiMode == FiltersUIMode.UseCheckboxes)
        {
            <li class="checkbox-item">
                <input @optionAttributes data-option-ids="@filterItem.Id" type="checkbox" id="@inputId" />
                <label class="filter-item-name" for="@inputId"@* data-originalText="@filterItem.Name"*@>@filterItem.Name</label>
            </li>
        }
        else
        {
            <option @optionAttributes data-option-ids="@filterItem.Id" value="@filterItem.Name">@filterItem.Name</option>
        }
    }
}

@helper GetListWithOptions(IList<ManufacturerFilterItem> manufacturerFilterItems, FiltersUIMode uiMode)
{
    if (uiMode == FiltersUIMode.UseCheckboxes)
    {
        @*if (Model.ManufacturerFilterItems.Count > 1)
        {
            <div class="filtersGroupSearch">
                <input type="text" class="filtersGroupSearchInput" />
            </div>        
        }*@

        <ul class="checkbox-list">
            @GetListOfOptions(manufacturerFilterItems, uiMode)
        </ul>
    }
    else
    {
        <select class="attribute-options-select" id="manufacturerFiltersDropDown">
            <option value="0">@T("SevenSpikes.NopAjaxFilters.Client.Common.All")</option>
            @GetListOfOptions(manufacturerFilterItems, uiMode)
        </select>
    }
}

@*<div class="block filter-block manufacturerFilterPanel7Spikes">
    <div class="title">
        <a class="@toggleStateClass">@T("Manufacturers")</a>
        <a class="clearFilterOptions">@T("SevenSpikes.NopAjaxFilters.Client.Common.Clear")</a>
    </div>
    <div class="filtersGroupPanel @filtersPanelClass" style="@toggleStateStyles">
        @GetListWithOptions(Model.ManufacturerFilterItems, Model.NopAjaxFiltersSettings.FiltersUIMode)
    </div>
</div>*@