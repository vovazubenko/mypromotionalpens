
@model ProductOverviewModel
@using Nop.Core
@using Nop.Core.Domain.Catalog
@using Nop.Core.Domain.Orders
@using Nop.Core.Domain.Tax
@using Nop.Core.Infrastructure
@using Nop.Web.Models.Catalog;
@using Nop.Web.Framework.Themes
@{
    //prepare "Add to cart" AJAX link
    string addtocartlink = "";
    var shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart;
    var quantity = 1;
    if (Model.ProductPrice.ForceRedirectionAfterAddingToCart)
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity, forceredirection = Model.ProductPrice.ForceRedirectionAfterAddingToCart });
    }
    else
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity });
    }

    var addtowishlistlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = (int)ShoppingCartType.Wishlist, quantity = quantity });
    var addtocomparelink = Url.RouteUrl("AddProductToCompare", new { productId = Model.Id });
    var themeName = EngineContext.Current.Resolve<IThemeContext>().WorkingThemeName;
}
<style>
    /*.item-box .buttons-upper input[type="button"] {
        background-image: url('../Themes/Pavilion/Content/img/product-sprite-1.png');
background-repeat: no-repeat;
    }*/
</style>
<style>
    .item-box .picture .quick-view-button a {
        display: none;
    }
</style>
<div class="product-item" data-productid="@Model.Id" itemscope itemtype="http://schema.org/Product">
    <div class="picture">
        <a href="@Url.RouteUrl("Product", new { SeName = Model.SeName })" title="@Model.DefaultPictureModel.Title">
            <img itemprop="image" height="auto" width="auto" style="max-height: 227px;" alt="@Model.DefaultPictureModel.AlternateText" src="@Model.DefaultPictureModel.ImageUrl" title="@Model.DefaultPictureModel.Title" />
        </a>
    </div>
    <div class="details">
        @*@if (Model.ReviewOverviewModel.AllowCustomerReviews)
        {
            int ratingPercent = 0;
            if (Model.ReviewOverviewModel.TotalReviews != 0)
            {
                ratingPercent = ((Model.ReviewOverviewModel.RatingSum * 100) / Model.ReviewOverviewModel.TotalReviews) / 5;
            }
            <div class="product-rating-box" title="@string.Format(T("Reviews.TotalReviews").Text, Model.ReviewOverviewModel.TotalReviews)">
                <div class="rating">
                    <div style="width: @(ratingPercent)%">
                    </div>
                </div>
            </div>
            if (ratingPercent > 0)
            {
                <div style="display:none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
                    Rated <span itemprop="ratingValue">@(ratingPercent * 5 / 100)</span>/5
                    based on <span itemprop="reviewCount">@Model.ReviewOverviewModel.TotalReviews</span> customer reviews
                </div>
            }
        }*@
        <div class="attribute-squares-wrapper"></div>
        <div class="add-info">
            @Html.Widget("productbox_addinfo_before", Model.Id)
            @if (Model.ProductPrice.LowestPrice > 0)
            {
                <div style="display:none;" itemprop="offers" itemscope itemtype="http://schema.org/Offer">
                    <strong>Price start from : </strong>
                    <span itemprop="priceCurrency">$</span>
                    <span itemprop="price">
                        @Model.ProductPrice.LowestPrice.ToString("0.00", System.Globalization.CultureInfo.InvariantCulture)
                    </span>
                </div>
            }
            <div class="prices" style="height:46px !important;">
                <span class="" style="color: #025286;">
                    <!--as low as : $
                @if (Model.ProductPrice.DiscountRanges != null && Model.ProductPrice.DiscountRanges.Any())
                {
                    @Model.ProductPrice.LowestPrice.ToString("0.00", System.Globalization.CultureInfo.InvariantCulture)
                }
                else
                {
                    @Model.ProductPrice.PriceValue.ToString("0.00", System.Globalization.CultureInfo.InvariantCulture)
                }-->

                     @if (@Model.AmountMax.ToString() == @Model.AmountMin.ToString() && @Model.AmountMin > 0)
                {


                    <span>Price: $  @Model.AmountMin.ToString("0.00", System.Globalization.CultureInfo.InvariantCulture)</span>

                }
                else if (@Model.AmountMax < 0 && Model.AmountMax < 0)
                {
                                <span>Price: $ 0.00 </span>
                }
                else
                {<span>Prices From</span>
                    if (@Model.AmountMax > 0 && @Model.AmountMin > 0)
                    {
                        <span>
                            $ @Model.AmountMin.ToString("0.00", System.Globalization.CultureInfo.InvariantCulture)  to
                            $ @Model.AmountMax.ToString("0.00", System.Globalization.CultureInfo.InvariantCulture)
                        </span>
                    }
                    else
                    {<span> $ 0.00 to $ 0.00</span>


                    }




                }
            </span>

            @if (!String.IsNullOrEmpty(Model.ProductPrice.OldPrice))
            {
                <span class="price old-price">@Model.ProductPrice.OldPrice</span>
            }
            @if (Model.ProductPrice.DisplayTaxShippingInfo)
            {
                var inclTax = EngineContext.Current.Resolve<IWorkContext>().TaxDisplayType == TaxDisplayType.IncludingTax;
                //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                //of course, you can modify appropriate locales to include VAT info there
                <span class="tax-shipping-info">
                    @T(inclTax ? "Products.Price.TaxShipping.InclTax" : "Products.Price.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("shippinginfo") }))

                </span>
            }
            @if (!String.IsNullOrEmpty(Model.ProductPrice.BasePricePAngV))
            {
                <span class="price base-price">@Model.ProductPrice.BasePricePAngV</span>
            }
        </div>
        @Html.Widget("productbox_addinfo_middle", Model.Id)

        <div class="description">
            @Html.Raw(Model.ShortDescription)
        </div>

        @Html.Widget("productbox_addinfo_after", Model.Id)
    </div>
    <h3 class="product-title" itemprop="name">
        <a itemprop="url" href="@Url.RouteUrl("Product", new { SeName = Model.SeName })">@Model.Name</a>
    </h3>

    @if (EngineContext.Current.Resolve<CatalogSettings>().ShowSkuOnCatalogPages && !string.IsNullOrEmpty(Model.Sku))
    {
        <div class="sku">
            @Model.Sku
        </div>
    }

    </div>
</div>
