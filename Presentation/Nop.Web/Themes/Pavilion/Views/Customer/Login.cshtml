@model LoginModel
@using Nop.Web.Models.Customer;
@using Nop.Core;
@using Nop.Core.Infrastructure;

@{
    var isCalledAsPopup = !string.IsNullOrEmpty(Context.Request.QueryString["isPopup"]);
    
    Layout = isCalledAsPopup ? "" : "~/Views/Shared/_ColumnsOne.cshtml";

    //title
    Html.AddTitleParts(T("PageTitle.Login").Text);
    //page class
    Html.AppendPageCssClassParts("html-login-page");

    //register URL with return URL (if specified)
    var registerUrl = Url.RouteUrl("Register");
    if (!string.IsNullOrEmpty(Context.Request.QueryString["returnUrl"]))
    {
        var webHelper = EngineContext.Current.Resolve<IWebHelper>();
        registerUrl = webHelper.ModifyQueryString(registerUrl, "returnurl=" + HttpUtility.UrlEncode(Context.Request.QueryString["returnUrl"]), null);
    }
}

<div class="page login-page">
    <div class="page-title">
        <h1>@T("Account.Login.Welcome")</h1>
    </div>
    @Html.Partial("_ExternalAuthentication.AssociateMessage")
    @Html.Partial("_ExternalAuthentication.Errors")
    <div class="page-body">
        <div class="customer-blocks">
            @if (Model.CheckoutAsGuest)
            {
                <div class="new-wrapper checkout-as-guest-or-register-block">
                    <div class="title">
                        <strong>@T("New Customer")</strong>
                    </div>
                    <div class="inner-wrapper">
                        <div class="text">
                            @Html.Action("TopicBlock", "Topic", new {systemName = "CheckoutAsGuestOrRegister"})
                        </div>
                        <div class="buttons">
                            <input type="button" class="button-1 register-button" onclick="location.href = '@registerUrl'" value="@T("Account.Register")" />
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="new-wrapper register-block">
                    <div class="title">
                        <strong>@T("Account.Login.NewCustomer")</strong>
                    </div>
                    <div class="inner-wrapper">
                        <div class="" style="padding-bottom: 10px;text-align: center;">
                            <span style="word-wrap: break-word;width: 100%;color: red;font-weight:700;"></span>


                        </div>
                        <div class="text">
                            @T("Account.Login.NewCustomerText")
                        </div>
                        <div class="buttons">
                            <input type="button" class="button-1 register-button" onclick="location.href = '@registerUrl'" value="@T("Account.Register")"/>
                        </div>
                    </div>
                </div>
            }
            <div class="returning-wrapper fieldset">
                @using (Html.BeginForm())
                {
                    var validationSummary = Html.ValidationSummary(true, T("Account.Login.Unsuccessful").Text);
                    
                    <div class="title active">
                        <strong>@T("Account.Login.ReturningCustomer")</strong>
                    </div>
                    <div class="inner-wrapper show">
                        @if (!MvcHtmlString.IsNullOrEmpty(validationSummary))
                        {
                            <div class="message-error">@validationSummary</div>
                        }
                        <div class="form-fields">
                            @if (Model.UsernamesEnabled)
                            {
                                <div class="inputs">
                                    @Html.LabelFor(m => m.Username, new {}, ":")
                                    @Html.TextBoxFor(m => m.Username, new { @class = "username", autofocus = "autofocus", @placeholder= Html.DisplayNameFor(m => m.Username) })
                                    @Html.ValidationMessageFor(m => m.Username)
                                </div>
                            }
                            else
                            {
                                <div class="inputs">
                                    @Html.LabelFor(m => m.Email, new {}, ":")
                                    @Html.TextBoxFor(m => m.Email, new {@class = "email", autofocus = "autofocus", @placeholder = Html.DisplayNameFor(m => m.Email) })
                                    @Html.ValidationMessageFor(m => m.Email)
                                </div>
                            }
                            <div class="inputs">
                                @Html.LabelFor(m => m.Password, new {}, ":")
                                @Html.PasswordFor(m => m.Password, new {@class = "password",@placeholder = Html.DisplayNameFor(m => m.Password) })
                                @Html.ValidationMessageFor(m => m.Password)
                            </div>
                            <div class="inputs reversed">
                                @Html.CheckBoxFor(m => m.RememberMe)
                                @Html.LabelFor(m => m.RememberMe)
                                <span class="forgot-password">
                                    @Html.RouteLink(T("Account.Login.ForgotPassword").Text, "PasswordRecovery")
                                </span>
                            </div>
                            @if (Model.DisplayCaptcha)
                            {
                                <div class="captcha-box">
                                    @Html.Raw(Html.GenerateCaptcha())
                                </div>
                            }
                        </div>
                        <div class="buttons">
                            <input class="button-1 login-button" type="submit" value="@T("Account.Login.LoginButton")"/>
                        </div>
                    </div>
                }
            </div>
        </div>

        @{
            var externalMethods = Html.Action("ExternalMethods", "ExternalAuthentication");
            
            if (!MvcHtmlString.IsNullOrEmpty(externalMethods))
            {
                <div class="external-authentication">
                    @externalMethods
                </div>
            }
        }

        @if (!isCalledAsPopup)
        {
            @Html.Action("TopicBlock", "Topic", new {systemName = "LoginRegistrationInfo"})
        }
        else
        {
            <div id="login-modal-window-static-resources">
                @Html.NopCssFiles(this.Url, ResourceLocation.Head)
                @Html.NopCssFiles(this.Url, ResourceLocation.Foot)
                @Html.NopScripts(this.Url, ResourceLocation.Head)
                @Html.NopScripts(this.Url, ResourceLocation.Foot)
            </div>
        }
    </div>
</div>
