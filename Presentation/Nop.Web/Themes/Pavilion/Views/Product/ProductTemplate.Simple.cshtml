@model ProductDetailsModel
@using Nop.Core.Domain.Seo;
@using Nop.Core.Domain.Orders;
@using Nop.Core.Infrastructure;
@using Nop.Web.Models.Catalog;
@using Nop.Web.Framework.Themes
@using Nop.Core;
@using Nop.Services.Security;
@using Nop.Core.Domain.Customers;
@{
    Layout = "~/Views/Shared/_ColumnsOne.cshtml";

    var themeName = EngineContext.Current.Resolve<IThemeContext>().WorkingThemeName;
    //title
    Html.AddTitleParts(!String.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    Html.AppendPageCssClassParts("html-product-details-page");

    var seoSettings = EngineContext.Current.Resolve<SeoSettings>
    ();
    var showShareButton = EngineContext.Current.Resolve<Nop.Core.Domain.Catalog.CatalogSettings>
        ().ShowShareButton;

    var permissionService = EngineContext.Current.Resolve<IPermissionService>();

    //canonical URL
    if (seoSettings.CanonicalUrlsEnabled)
    {
        var productUrl = Url.RouteUrl("Product", new { SeName = Model.SeName }, this.Request.Url.Scheme);
        Html.AddCanonicalUrlParts(productUrl);
    }

    //open graph META tags
    if (seoSettings.OpenGraphMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"og:type\" content=\"product\" />");
        Html.AddHeadCustomParts("<meta property=\"og:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:description\" content=\"" + Html.Encode(Nop.Core.Html.HtmlHelper.StripTags(Model.MetaDescription)) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:url\" content=\"" + Request.Url.AbsoluteUri + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:site_name\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
    }

    //Twitter META tags
    if (seoSettings.TwitterMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"twitter:card\" content=\"summary\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:site\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:description\" content=\"" + Html.Encode(Nop.Core.Html.HtmlHelper.StripTags(Model.MetaDescription)) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:url\" content=\"" + Request.Url.AbsoluteUri + "\" />");
    }

    var _workContext = EngineContext.Current.Resolve<IWorkContext>();
    var CurrentCustomer = _workContext.CurrentCustomer;

    int enteredQuantity;
    int enteredQuantityFromCart = Model.AddToCart.EnteredQuantity;
    var minQtyExists = Model.DiscountRanges.Count(x => x.MinQty == enteredQuantityFromCart);
    var minQty = Model.DiscountRanges.Min(x => x.MinQty).Value;
    var subTotalPrice = Model.DiscountRanges.FirstOrDefault(x => x.MinQty == minQty).Amount;

    if (minQtyExists >= 1)
    {
        enteredQuantity = enteredQuantityFromCart;
        subTotalPrice = Model.DiscountRanges.FirstOrDefault(x => x.MinQty == enteredQuantity).Amount;
    }
    else if (enteredQuantityFromCart > minQty)
    {
        enteredQuantity = enteredQuantityFromCart;
        subTotalPrice = Model.DiscountRanges
            .Where(x => x.MinQty <= enteredQuantityFromCart)
            .OrderByDescending(x => x.MinQty)
            .FirstOrDefault()
            .Amount;
    }
    else
    {
        enteredQuantity = minQty;
    }

}
<!--product breadcrumb-->
@section Breadcrumb
        {
    @Html.Partial("_ProductBreadcrumb", Model.Breadcrumb)
}
<style>
    .qty-input {
        width: 45px !important;
        height: 45px !important;
        min-width: 45px !important;
    }
    .productbutton-button .button-1 {
        color: #18509d !important;
        background: none !important;
        cursor: pointer;
        border: none !important;
        font-size: 16px;
        font-weight: normal;
        text-transform: none;
        padding: 8px !important;
        text-decoration: underline;
    }
    .padding-none {
        padding: 0px !important;
    }
    .pr-12px {
        padding-right: 12px;
    }
    .w-100 {
        width: 100% !important;
    }
    .w-50 {
        width: 50% !important;
    }
    .my-6px {
        margin: 6px 0px;
    }
    .w-600 {
        font-weight: 600;
    }
    /* Chrome, Safari, Edge, Opera */
    input::-webkit-outer-spin-button,
    input::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    /* Firefox */
    input[type=number] {
        -moz-appearance: textfield;
    }
    .qty-inputs {
        padding: 0 8px;
        text-align: left !important;
        color: black !important;
    }
    .qty-inputs-readonly {
        background: #f0f0f0;
    }
    .d-none {
        display: none;
    }
    .customize-title {
        color: black;
        margin-top: 12px;
    }
    .relative-position {
        position: relative !important;
    }
    .albw {
        position: inherit !important;
    }
</style>
@Html.Widget("productdetails_after_breadcrumb", Model.Id)
<div class="page product-details-page order-details-page">
    @if (!Model.PrintMode)
    {
        <div class="page-title">

            <a style="margin: 0px 18px;" href="@Url.Action("PrintProductDetils","Product", new { Id = Model.Id })" target="_blank" class="button-2 print-order-button">@T("Order.Print")</a>

        </div>
    }
    <div class="page-body">
        
        @Html.Widget("productdetails_top", Model.Id)
        @using (Html.BeginRouteForm("Product", "ProductDetails", FormMethod.Post, new { id = "product-details-form" }))
        {
            <div itemscope itemtype="http://schema.org/Product" data-productid="@Model.Id">
                <div class="product-essential">
                    @Html.Widget("productdetails_before_pictures", Model.Id)
                    @{
                        var cloudZoom = Html.Widget("sevenspikes_cloud_zoom");
                    }
                    @if (!MvcHtmlString.IsNullOrEmpty(cloudZoom))
                    {
                        @cloudZoom
                    }
                    else
                    {
                        @Html.Partial("_ProductDetailsPictures", Model)
                    }
                    @Html.Widget("productdetails_after_pictures", Model.Id)

                    <div class="overview">
                        @Html.Widget("productdetails_overview_top", Model.Id)
                        @Html.Partial("_Discontinued", Model)
                        <!--manufacturers-->
                        @if (permissionService.Authorize(StandardPermissionProvider.AccessAdminPanel))
                        {
                            @Html.Partial("_ProductManufacturers", Model.ProductManufacturers)
                        }
                        <div class="product-name">
                            <h1 itemprop="name">
                                @Model.Name
                            </h1>@Html.Partial("_ProductReviewOverview", Model.ProductReviewOverview)
                            <div class="dynamic-icons">
                                @if (Model.ProductSpecifications.Any(a => a.SpecificationAttributeId == 630))
                                {
                                    if (Model.ProductSpecifications.Any(a => a.SpecificationAttributeOptionId == 653))
                                    {
                                        <img src="~/Content/Images/icon-Rush.gif" />
                                    }
                                    else if (Model.ProductSpecifications.Any(a => a.SpecificationAttributeOptionId == 655))
                                    {
                                        <img src="~/Content/Images/icon-3-Day-Rush.gif" />
                                    }
                                }
                                @if (Model.ProductSpecifications.Any(a => a.SpecificationAttributeId == 629))
                                {
                                    if (Model.ProductSpecifications.Any(a => a.SpecificationAttributeOptionId == 651))
                                    {
                                        <img src="~/Content/Images/icon-Full-Color.gif" />
                                    }
                                    else if (Model.ProductSpecifications.Any(a => a.SpecificationAttributeOptionId == 629))
                                    {
                                        <img src="~/Content/Images/icon-4-Color.gif" />
                                    }
                                    else if (Model.ProductSpecifications.Any(a => a.SpecificationAttributeOptionId == 649))
                                    {
                                        <img src="~/Content/Images/icon-3-Color.gif" />
                                    }
                                    else if (Model.ProductSpecifications.Any(a => a.SpecificationAttributeOptionId == 648))
                                    {
                                        <img src="~/Content/Images/icon-2-Color.gif" />
                                    }

                                    else if (Model.ProductSpecifications.Any(a => a.SpecificationAttributeOptionId == 647))
                                    {
                                        <img src="~/Content/Images/icon-1-Color.gif" />
                                    }
                                }
                                @if (Model.ProductSpecifications.Any(a => a.SpecificationAttributeOptionId == 641))
                                {
                                    <img src="~/Content/Images/icon-Blue-Ink.gif" />
                                }




                            </div>

                        </div>
                        <!--reviews-->
                        @*@Html.Partial("_ProductReviewOverview", Model.ProductReviewOverview)*@

                        <!--price & add to cart-->

                        <div class="product-detail-price">
                            @{
                                var dataDictPrice = new ViewDataDictionary();
                                dataDictPrice.TemplateInfo.HtmlFieldPrefix = string.Format("price_{0}", Model.Id);
                                @*@Html.Partial("_ProductPrice", Model.ProductPrice, dataDictPrice)*@
                            }
                            <div style="padding-top:20px;">
                                <div style="float:left;">
                                    @Html.Partial("_SKU_Man_GTIN_Ven", Model)
                                </div>

                                <div class="overview-buttons" style="float:right; padding: 0px 0px;">
                                        @Html.Widget("productdetails_inside_overview_buttons_before", Model.Id)
                                        @{
                                            var dataDictAddToWishlist = new ViewDataDictionary();
                                            dataDictAddToWishlist.TemplateInfo.HtmlFieldPrefix = string.Format("addtocart_{0}", Model.Id);
                                            @Html.Partial("_AddToWishlist", Model.AddToCart, dataDictAddToWishlist)
                                        }
                                        @Html.Partial("_CompareProductsButton", Model)
                                        @Html.Partial("_ProductEmailAFriendButton", Model)
                                        @Html.Widget("productdetails_inside_overview_buttons_after", Model.Id)
                                    </div>
                            </div>
                            <div class="table-price-product-right" style="padding-top:10px;">
                                @if (Model.DiscountRanges.Count > 0)
                                {
                                    var leastAmount = Model.DiscountRanges.OrderBy(x => x.Amount).FirstOrDefault().Amount;
                                    if (Model.IsEQP)
                                    {
                                        Model.DiscountRanges.ForEach(x => x.Amount = (Model.DiscountRanges.OrderBy(o => o.Amount).FirstOrDefault().Amount));
                                    }

                                        <div class="table-price-product" itemprop="offers" itemscope itemtype="http://schema.org/Offer">

                                        <table>
                                            <tr>
                                                <td colspan="@(Model.DiscountRanges.Count + 1)" style="background-color:#940808;text-align:center;color:white;font-size:medium;font-weight:bold;">
                                                    Pricing
                                                </td>
                                            </tr>
                                            <tr style="background-color:#dbdbdb;color:#025286 ;font-size:15px;"></tr>
                                            @{
                                                var cnt = Model.DiscountRanges.Count - 1;
                                                var counter = 0;

                                                <tr style="background-color:#f4f4f4; font-size:13px">
                                                    <td align="center" class="min-qty-for-product" data-id="@minQty">
                                                        Quantity Range
                                                    </td>
                                                    @foreach (var a in Model.DiscountRanges)
                                                    {
                                                        if (counter < cnt)
                                                        {
                                                            <td align="center">
                                                                @a.MinQty - @a.MaxMiniQty
                                                            </td>
                                                        }
                                                        else
                                                        {
                                                            <td align="center">
                                                                @a.MinQty - More
                                                            </td>

                                                        }
                                                        counter = counter + 1;
                                                    }
                                                </tr>
                                                <tr style="background-color:#f4f4f4; font-size:13px">

                                                    <td align="center">
                                                        Sale Price
                                                    </td>
                                                    @foreach (var a in Model.DiscountRanges)
                                                    {
                                                        if (counter < cnt)
                                                        {
                                                            <td align="center">
                                                                $@a.Amount.ToString("0.00", System.Globalization.CultureInfo.InvariantCulture) ea.
                                                            </td>
                                                        }
                                                        else
                                                        {
                                                            <td align="center">
                                                                $@a.Amount.ToString("0.00", System.Globalization.CultureInfo.InvariantCulture) ea.
                                                                <div style="display:none;">
                                                                    <strong>Price : </strong>
                                                                    <span itemprop="priceCurrency">$</span>
                                                                    <span itemprop="price">
                                                                        @a.Amount.ToString("0.00", System.Globalization.CultureInfo.InvariantCulture)
                                                                    </span>
                                                                </div>
                                                            </td>

                                                        }
                                                        counter = counter + 1;
                                                    }
                                                </tr>
                                            }
                                            <tr>
                                                <td colspan="@(Model.DiscountRanges.Count + 1)" style="background-color:#940808;text-align:center;color:white;font-size:medium;font-weight:bold;">
                                                    @if (Model.ProductPrice.SetupFee >= 0)
                                                    {
                                                        <div class="base-price-pangv">
                                                            <span class="label"> Setup Charges:</span> $@Model.ProductPrice.SetupFee.ToString("0.00", System.Globalization.CultureInfo.InvariantCulture)
                                                        </div>
                                                    }

                                                </td>


                                            </tr>
                                        </table>

                                    </div>

                                }
                                else
                                {
                                    <div class="table-price-product" style="overflow:hidden;" itemprop="offers" itemscope itemtype="http://schema.org/Offer">

                                        <table style="border:none;border-collapse:unset;">

                                            <tr style="font-size:15px;"></tr>
                                            <tr>
                                                <td colspan="@(Model.DiscountRanges.Count + 1)" style="color:black; font-size:medium;font-weight:bold;">
                                                    @if (Model.ProductPrice.Price != "")
                                                    {
                                                        <div class="base-price-pangv">
                                                            <span class="label" style="color:black"> Price:</span> @Model.ProductPrice.Price
                                                        </div>
                                                    }

                                                </td>


                                            </tr>
                                            <tr>
                                                <td colspan="@(Model.DiscountRanges.Count + 1)" style="color:black; font-size:medium;font-weight:bold;">
                                                    @if (Model.ProductPrice.SetupFee >= 0)
                                                    {
                                                        <div class="base-price-pangv">
                                                            <span class="label" style="color:black"> Setup Charges:</span> $@Model.ProductPrice.SetupFee.ToString("0.00", System.Globalization.CultureInfo.InvariantCulture)
                                                        </div>
                                                    }

                                                </td>


                                            </tr>
                                        </table>

                                    </div>
                                }

                            </div>

                        </div>

                        <div class="subtotal-price-section">
                            <table class="w-100">
                                <tr>
                                    <td colspan="2">
                                        <b><strong>Choose Your Quantity</strong></b>
                                    </td>
                                </tr>

                                <tr>
                                    <td class="w-50">Quantity</td>
                                    <td class="w-50">Price Each</td>
                                </tr>

                                <tr>
                                    <td class="w-50 pr-12px">
                                        <input name="itemquantity@(Model.Id)" type="number" 
                                               value="@enteredQuantity" 
                                               class="qty-input w-100 qty-inputs qty-value" 
                                               data-id="@enteredQuantity" 
                                        />
                                    </td>
                                    <td class="w-50">
                                        <input name="value@(Model.Id)" 
                                               type="text" 
                                               class="qty-input w-100 qty-inputs qty-inputs-readonly" 
                                               readonly
                                               value="$@(Math.Round(subTotalPrice, 2))" 
                                               data-id="@(subTotalPrice)" />
                                    </td>
                                </tr>

                                <tr>
                                    <td class="w-50">
                                        <div class="discount-section-per-item d-none">
                                            @foreach (var disc in Model.DiscountRanges.OrderBy(x => x.MinQty))
                                            {
                                                <div class="discount-items-unique">
                                                    <div class="minQuantity">@disc.MinQty</div>
                                                    <div class="maxQuantity">@disc.MaxMiniQty</div>
                                                    <div class="discPrice">@Math.Round(disc.Amount, 2)</div>
                                                    <hr />
                                                </div>
                                            }
                                        </div>
                                    </td>
                                    <td class="w-50 relative-position">
                                        <table class="w-100 my-6px">
                                            <thead>
                                                <tr>
                                                    <td colspan="2">
                                                        <div class="ajax-loading-block-window albw" style="display: none"></div>
                                                    </td>
                                                </tr>
                                            </thead>
                                            <tr>
                                                <td class="w-50">Subtotal</td>
                                                <td class="w-50 subtotal-price-value">
                                                    $@(Math.Round(subTotalPrice * enteredQuantity, 2))
                                                </td>
                                            </tr>

                                            <tr>
                                                <td class="w-50">Setup Charge</td>
                                                <td class="w-50 setup-charge-value">$@Model.ProductPrice.SetupFee.ToString("0.00", System.Globalization.CultureInfo.InvariantCulture)</td>
                                            </tr>

                                            <tr>
                                                <td class="w-50">Total</td>
                                                <td class="w-50 w-600 total-value">
                                                    $@(Math.Round((subTotalPrice * enteredQuantity) + Model.ProductPrice.SetupFee, 2))
                                                </td>
                                            </tr>
                                        </table>

                                    </td>
                                </tr>
                            </table>
                        </div>

                        @if (Model.IsFreeShipping == true)
                        {
                            if (!string.IsNullOrEmpty(Model.FullDescription))
                            {
                                <div class="desc" style="float: right;">
                                    <div style="font-weight: 700;"></div>
                                    <b><strong>Description</strong></b> 
                                    <div class="show-description">@Html.Raw(GetDescription(Model.FullDescription))</div>
                                </div>
                            }
                            @Html.Action("TopicBlock", "Topic", new { systemName = "freeshipping-detail" })
                        }
                        else
                        { if (!string.IsNullOrEmpty(Model.FullDescription))
                            {
                                <div class="desc">
                                    <div style="font-weight: 700;"></div><b><strong>Description</strong></b>

                                </div>
                                <div class="desc show-description">@Html.Raw(GetDescription(Model.FullDescription))</div>

                            }
                        }

                        <!--rental info-->
                        @{
                            var dataDictRental = new ViewDataDictionary();
                            dataDictRental.TemplateInfo.HtmlFieldPrefix = string.Format("rental_{0}", Model.Id);
                            @Html.Partial("_RentalInfo", Model, dataDictRental)
                        }
                        @*@if (!String.IsNullOrEmpty(Model.ShortDescription))
        {
            <div class="short-description">
                @Html.Raw(Model.ShortDescription)
            </div>
        }*@
                        <!--SKU, MAN, GTIN, vendor-->
                        <!--sample download-->
                        @Html.Partial("_DownloadSample", Model)
                        <!--attributes-->

                        @if (Model.GiftCard.IsGiftCard != true)
                        {
                            <div class="customise-buy">
                                @*<a class="cust-button">
                    <span>Click Here To Start Customizing</span>
                    <span class="spcustomtarrow">
                        <img style="display:none;" src="@string.Format("/Themes/{0}/Content/img/up-arrow.png", themeName)" class="customarrowimgu" />
                        <img src="@string.Format("/Themes/{0}/Content/img/down-arrow.png", themeName)" class="customarrowimgd" />
                    </span>
                </a>*@

                                @{
                                    var dataDictAttributes = new ViewDataDictionary();
                                    dataDictAttributes.TemplateInfo.HtmlFieldPrefix = string.Format("attributes_{0}", Model.Id);
                                    <div class="product_attributes">
                                        <div class="divProductAttribute" style="display:none;">
                                            @Html.Partial("_ProductAttributes", Model.ProductAttributes, dataDictAttributes)
                                        </div>
                                        <div class="divProductAttribute attributes overall-buttons" style="display: none;">

                                            <div class="overview-buttons">
                                                @{var dataDictAddToCart = new ViewDataDictionary();
                                                    dataDictAddToCart.TemplateInfo.HtmlFieldPrefix = string.Format("addtocart_{0}", Model.Id);
                                                    @Html.Partial("_AddToCart", Model.AddToCart, dataDictAddToCart)
                                                }
                                            </div>
                                        </div>
                                    </div>
                                }
                                <div class="ortext">
                                    <span class="sep-or">OR</span>
                                </div>

                                <div class="overall-buttons padding-none">
                                    <div class="productbutton-button" style="width:100%">
                                        <ul>
                                            <li><a class="button-1" id="btn-Quote-request">Quote Request</a></li>
                                            <li><a class="button-1" id="btn-sample-request">Sample Request</a></li>
                                            <li><a class="button-1" id="btn-proof-request">Art Proof Request</a></li>
                                        </ul>
                                    </div>
                                </div>

                                @*<div class="productbutton-button">
                    <ul>
                        <li><a class="button-1" onclick="AjaxCart.addproducttocart_details('@Url.RouteUrl("AddProductToCart-Details", new { productId = Model.Id, shoppingCartTypeId = (int)ShoppingCartType.SampleCart, quantity = 1 })', '#product-details-form');return false;">Sample Request</a></li>
                        <li><a class="button-1" href="@Url.RouteUrl("virtual-proof-request")">Proof Request</a></li>
                        <li><a class="button-1" href="@Url.RouteUrl("quote-request")">Quote Request</a></li>
                    </ul>

                </div>*@
                            </div>
                        }
                        <!--gift card-->
                        @{
                            if (Model.GiftCard.IsGiftCard == true)
                            {
                                var dataDictGiftCard = new ViewDataDictionary();
                                dataDictGiftCard.TemplateInfo.HtmlFieldPrefix = string.Format("giftcard_{0}", Model.Id);
                                @Html.Partial("_GiftCardInfo", Model.GiftCard, dataDictGiftCard)
                                if (Model.GiftCard.GiftCardType == Nop.Core.Domain.Catalog.GiftCardType.Virtual)
                                {
                                    <div class="overview-buttons">
                                        @{var dataDictAddToCart1 = new ViewDataDictionary();
                                            dataDictAddToCart1.TemplateInfo.HtmlFieldPrefix = string.Format("addtocart_{0}", Model.Id);
                                            @Html.Partial("_AddToCart", Model.AddToCart, dataDictAddToCart1)
                                        }
                                    </div>
                                }
                            }
                        }
                        <!--availability-->
                        @Html.Partial("_Availability", Model)
                        <!--add to cart-->
                        <!--wishlist, compare, email a friend-->

                        @Html.Widget("productdetails_overview_bottom", Model.Id)
                    </div>
                    <div class="overview-bottom">
                        <!--sharing-->
                        @if (showShareButton)
                        {
                            @Html.Partial("_ShareButton", Model.SeName)
                        }
                        <!--delivery-->
                        @Html.Partial("_DeliveryInfo", Model)
                    </div>
                </div>

                @{
                    var nopQuickTabsHtml = Html.Widget("productdetails_before_collateral", Model.Id);
                }

                @if (!MvcHtmlString.IsNullOrEmpty(nopQuickTabsHtml))
                {
                    var productsCarouselHtml = Html.Widget("productpage_after_collateral", Model.Id);
                    var carouselQuickTabsWrapperClass = "one-column-wrapper";
                    if (!MvcHtmlString.IsNullOrEmpty(productsCarouselHtml))
                    {
                        carouselQuickTabsWrapperClass = "two-column-wrapper";
                    }

                    <div class="@carouselQuickTabsWrapperClass">
                        @nopQuickTabsHtml @*nop quick tabs*@

                        @productsCarouselHtml @*products carousel for related or also purchased with 1 visible item*@
                    </div>
                }

                <div class="product-collateral">
                    @if (!String.IsNullOrEmpty(Model.FullDescription))
                    {
                        <div class="full-description" itemprop="description">
                            @Html.Raw(Model.FullDescription)
                        </div>
                    }
                    @Html.Partial("_ProductTierPrices", Model.TierPrices)
                    @*@Html.Partial("_ProductSpecifications", Model.ProductSpecifications)*@
                    @Html.Partial("_ProductTags", Model.ProductTags)
                </div>
                @Html.Action("ProductsAlsoPurchased", "Product", new { productId = Model.Id })
                @Html.Action("RelatedProducts", "Product", new { productId = Model.Id })
            </div>
        }
        @Html.Widget("productdetails_bottom", Model.Id)
    </div>
</div>
@Html.Partial("_ProductSampleRequestForm", Model)
@Html.Partial("_ProductProofRequestForm", Model)
@Html.Partial("_ProductQuoteRequestForm", Model)

@functions {

    public String GetDescription(string desc)
    {
        var description = string.Empty;
        var words = Nop.Core.Html.HtmlHelper.FormatText(desc, true, true, false, false, false, false).Split(' ').ToList();
        if (words.Count > 8)
        {
            description = string.Join(" ", words.Take(8));
            //return description + "...<a  href='" + Url.RouteUrl("Product", new { SeName = Model.SeName }) + "'>show more</a>";
            return description + "...<a href='#' onclick='showFullDescription(event);'>show more</a>";
        }
        else
        {
            description = desc;
            return description;
        }
    }


    

}
<script>
    function showFullDescription(event) {
        event.preventDefault();

        var fullDescription = $(".full-description").html();
        var result = fullDescription + "<a  href='#' onclick='showLessDescription(event);'>show less</a>";
        $(".show-description").html(result);
    }

    function showLessDescription(event) {
        event.preventDefault();

        var lessDescription = "@Html.Raw(GetDescription(Model.FullDescription))";
        $(".show-description").html(lessDescription);
    }

    $(document).ready(function () {
        $("html,body").animate({
            scrollTop: 0
        }, 10);

        initQuantity();

        function initQuantity() {
            $(".qty-value").each(function (item, value) {
                oldQuantity = $(value).attr("data-id");
                newValue = $(value).val();

                if (oldQuantity != newValue) {
                    $(value).val(oldQuantity);
                }
            })
        };

        openModal();

        function openModal() {
            var url = window.location.href;
            var pathParameter = '#redirectquery=';
            var quoteVariable = 'quote';
            var sampleVariable = 'sample';
            var artProofVariable = 'artproof';
            var quoteBtn = $("#btn-Quote-request");
            var sampleBtn = $("#btn-sample-request");
            var artProofBtn = $("#btn-proof-request");
            var urlArray = url.split(pathParameter);

            if (urlArray.length > 1) {
                var currentVariable = urlArray[1];
                var timeDelay = 500;
                var timeDelayPlus = timeDelay + 100;
                var resultEl;

                if (currentVariable == quoteVariable) {
                    resultEl = quoteBtn;
                } else if (currentVariable == sampleVariable) {
                    resultEl = sampleBtn;
                } else if (currentVariable == artProofVariable) {
                    resultEl = artProofBtn;
                };

                if (resultEl !== undefined) {
                    $("html,body").animate({ scrollTop: resultEl.offset().top - 200 }, timeDelay);

                    setTimeout(function () {
                        resultEl.click();
                    }, timeDelayPlus);

                    history.pushState({}, null, urlArray[0]);
                };
            };
        };
    });

    function ConvertMoneyToFloat(value) {
        return parseFloat(value.replace("$", "").replace(",", ""));
    }

    function CalculateNewPriceData(quantity) {
        var items = $(".discount-items-unique");
        var priceInRange = false;
        var largestQuantities = [];

        $(items).each(function (item, value) {

            minQuantity = $(value).find(".minQuantity").html();
            maxQuantity = $(value).find(".maxQuantity").html();
            discPrice = $(value).find(".discPrice").html();

            largestQuantities.push(parseInt(maxQuantity));

            if (!maxQuantity) {
                maxQuantity = 2 ** 64
            }

            if (parseInt(minQuantity) <= parseInt(quantity) && parseInt(quantity) <= parseInt(maxQuantity)) {

                var setupFee = ConvertMoneyToFloat($(".setup-charge-value").html());

                $(".qty-inputs-readonly").val("$" + discPrice);
                $(".subtotal-price-value").html("$" + (discPrice * quantity).toFixed(2));
                $(".total-value").html("$" + ((discPrice * quantity) + setupFee).toFixed(2));

                $(".qty-input-add-cart").val(quantity);

                priceInRange = true;
                return false;
            }
        });

        if (!priceInRange) {
            filteredArray = largestQuantities.filter(n => n < quantity);
            filteredArray.sort(function (a, b) { return b - a });

            if (filteredArray.length > 0) {
                closestMinimumQuantity = filteredArray[0];
            } else {
                closestMinimumQuantity = $(".min-qty-for-product").attr("data-id");
            }

            $(".qty-value").val(closestMinimumQuantity);

            CalculateNewPriceData(closestMinimumQuantity);
        };

        return false;
    }

    $(".qty-value").on('input change', function (e) {

        quantity = e.target.value;
        var minQty = $(".min-qty-for-product").attr("data-id");

        displaySpinnerTrigger = $(".albw").css("display") == "block";
        onChangeEventType = e.type == 'change';

        if (displaySpinnerTrigger && !onChangeEventType) return;

        if (parseInt(quantity) < parseInt(minQty)) {

            $(".albw").show();
            $(".subtotal-price-value").html('');
            $(".total-value").html('');

            delayTimeOut = 5 * 1000;

            if (onChangeEventType) delayTimeOut = 1;

            setTimeout(function () {
                newQuantityAfterTime = $(".qty-value").val();

                if (parseInt(newQuantityAfterTime) > parseInt(minQty)) {
                    quantity = newQuantityAfterTime;
                } else {
                    quantity = minQty;
                }

                $(e.target).val(quantity);

                CalculateNewPriceData(quantity);
                $(".albw").hide();
            }, delayTimeOut);
        } else {
            CalculateNewPriceData(quantity);
            $(".albw").hide();
        }

    });
</script>