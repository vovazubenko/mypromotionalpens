@model Nop.Admin.Models.ASI.ProductsTaskStatusModel
@using Nop.Core.Domain.ASI;
@{
    //page title
    ViewBag.Title = T("Admin.ASI.Products.Status").Text;
    //active menu item (system name)
    Html.SetActiveMenuItemSystemName("ASIProducts");
    var defaultGridPageSize = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>().DefaultGridPageSize;
    var gridPageSizes = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>().GridPageSizes;
}


@using (Html.BeginForm("", "", new { }, FormMethod.Post, new { Id = "ProductStatusForm" }))
{
    @Html.AntiForgeryToken()
    <div class="content-header clearfix">
        <h1 class="pull-left">
            @T("Admin.ASI.Products.Status")
        </h1>
        <div class="pull-right">
            @if (!Model.TaskRunning)
            {
                <a href="@Url.Action("ASIProduct")" name="save" class="btn bg-blue">
                    <i class="fa fa-floppy-o"></i>
                    @T("Admin.ASI.AddNewProduct")
                </a>
            }
        </div>
    </div>

    <div class="content">
        <div class="form-horizontal">
            <div class="panel-group">
                <div class="panel panel-default panel-search">
                    <div class="panel-body">
                        <div class="row">
                            <div class="col-md-12">
                                <div class="uk-grid" data-uk-grid-margin>

                                    <div class="uk-width-1-1">
                                        @if (Model.SearchOptionCount > 0)
                                        {
                                            if (Model.TaskRunning)
                                            {
                                                <h5 style="margin: 0px 0px 10px; color: red;">
                                                    @T("Admin.ASI.Products.UpdateMessage")
                                                </h5>
                                            }

                                        }
                                        else {
                                            <h4>No process is running..</h4>
                                        }


                                    </div>



                                </div>

                            </div>

                        </div>
                    </div>
                </div>

                <div class="panel panel-default">
                    <div class="panel-body">
                        <div id="products-grid"></div>


                    </div>
                </div>
            </div>
        </div>
    </div>
}



<script>
    $(document).ready(function () {
        @if (Model.SearchOptionCount > 0)
        {
            <text>
        $("#products-grid").kendoGrid({
            dataSource: {
                type: "json",
                transport: {
                    read: {
                        //url: url, //"/Users/List",
                        url: "@Url.Action("GetProductTaskStatus", "ASI")", //"/Users/List",
                        type: "POST",
                        dataType: "json",
                        contentType: "application/json",
                        data: additionalData()
                    },
                    parameterMap: function (data, operation) {
                        if (operation != "read") {
                            return data;
                        } else {
                            //for some reasons only such "Filter" data be parsed
                            return JSON.stringify(data);
                        }
                    }
                },
                schema: {
                    data: "Data",
                    total: "Total",
                    errors: "Errors",
                    model: {
                        id: "Id",
                        fields: {
                            Keyword: { editable: false, type: "string" },
                            Type: { editable: false, type: "string" },
                            Status: { editable: false, type: "string" },
                            TotalRecordsFound: { editable: false, type: "string" },
                            TotalRecordsRetrived: { editable: false, type: "string" },
                            TimeTaken: { editable: false, type: "string" },
                            AddedDate: { editable: false, type: "date" },
                            //Id: { editable: true, type: "string" },
                        }
                    }
                },
                error: function (e) {
                    // Cancel the changes
                    this.cancelChanges();
                },
                pageSize: 15,
                serverPaging: true,
                serverFiltering: true,
                serverSorting: true
            },
            dataBound: function () { },
            editable: {
                confirmation: "@T("Admin.Common.DeleteConfirmation")",
                mode: "inline"
            },
            //filterable: {
            //    extra: false,
            //    operators: {
            //        string: {
            //            contains: "Contains",
            //            doesnotcontain: "Does not contain",
            //            eq: "Is equal to",
            //            neq: "Is not equal to",
            //            startswith: "Starts with",
            //            endswith: "Ends with"
            //        }
            //    }
            //},
            //sortable: {
            //    mode: "multiple",
            //    allowUnsort: true
            //},
            pageable: {
                refresh: true,
                pageSizes: [10, 15, 20, 50, 100]
            },
            scrollable: false,
            columns: [{

                title: "Search Keyword",
                field: "Keyword",

            }, {
                title: "Search Keyword Type",
                field: "Type"
            }, {
                title: "Status",
                field: "Status"
            },
            {
                title: "Total Records Found",
                field: "TotalRecordsFound",
                template: '#if (Status=="Failed") { #-# }else{# #: TotalRecordsFound # #} #'
                
            },
            {
                title: "Total Records Retrived",
                field: "TotalRecordsRetrived",
                template: '#if (Status=="Failed") { #-# }else{# #: TotalRecordsRetrived # #} #'
            }, {
                title: "Time Taken",
                field: "TimeTaken",
                template: '#if (Status=="Failed") { #-# }else{# #: TimeTaken # #} #'
            }
            , {
                title: "Created Date",
                field: "AddedDate",
                width: 200,
                type: "date",
                format: "{0:G}"
            }
            ,
            @*{
                field: "Id",
                title: "@T("Admin.Common.Delete")",
                width: 100,
                headerAttributes: { style: "text-align:center" },
                attributes: { style: "text-align:center" },
                template: '#if (Status=="WaitingToRun") { #<a class="btn bg-red" href="DeleteSearchOption/#=Id#"><i class="fa fa-trash-o"></i>Remove</a> # } #'
                //template: '<a class="btn bg-red" href="DeleteSearchOption/#=Id#"><i class="fa fa-trash-o"></i>Remove</a>'
            }*@
            ]
        });

        </text>
            }
    });
    function additionalData() {
        var data = {};
        addAntiForgeryToken(data);
        return data;
    }
</script>
